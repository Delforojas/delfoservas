security:
  enable_authenticator_manager: true

  password_hashers:
    App\Entity\Users: 'auto'

  providers:
    app_user_provider:
      entity:
        class: App\Entity\Users
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # Login (manejado solo por el firewall)
    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login   # debe coincidir con la ruta en routes.yaml
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    # Resto del API protegido por JWT
    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~

  access_control:
    # público
    - { path: ^/api/register, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/login,    roles: PUBLIC_ACCESS, methods: [POST] }


     # wallet solo admin o profe
    - { path: ^/api/wallet/create, roles: [ROLE_ADMIN, ROLE_TEACHER] }
    - { path: ^/api/wallet/delete, roles: [ROLE_ADMIN, ROLE_TEACHER] }

    - { path: ^/api/room/create, roles: [ROLE_ADMIN, ROLE_TEACHER] }
    - { path: ^/api/room/delete, roles: [ROLE_ADMIN, ROLE_TEACHER] }

    - { path: ^/api/clases/create, roles: [ROLE_ADMIN, ROLE_TEACHER] }
    - { path: ^/api/clases/delete, roles: [ROLE_ADMIN, ROLE_TEACHER] }

    # solo ADMIN
    - { path: ^/api/admin, roles: ROLE_ADMIN }

    # solo PROFESOR (y admin también, si quieres, usa ROLE_TEACHER o combinación)
    - { path: ^/api/prof, roles: [ROLE_TEACHER, ROLE_ADMIN] }

    # autenticado para el resto
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    - { path: ^/vistas, roles: [ROLE_ADMIN, ROLE_TEACHER]}